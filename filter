#!/usr/bin/env raku
# filter - filter a list of filenames, outputting only those whose extension denotes a specified "type".

# usage:
# filter [--print=FORMAT] <type>
#
# type can be: audio, image, video, visual (images and video), media (audio, images, and video), or directory
# type can also be abbreviated to the first letter.
#
# if --print is provided, just print the list of extensions that would be used rather than filtering.
# the format of --print output can be set to "find", "space", or "newline" (the default)

# examples:

# list all the video files in ~/media:
# find ~/media | filter v

# list every audio file in your home directory:
# find ~/ | filter a

# code:

our %types := {
    image => qw/ bmp gif jpeg jpg png webp /,
    audio => qw/ aac aif aiff flac m4a mp3 ogg opus wav wma /,
    video => qw/ avi flv m2t m4v mkv mov mp4 ogv webm wmv /,
    archive => qw/ 7z bz2 gz rar tar zip /,
    directory => ("/", ),
};
%types{"visual"} = [|%types{"image"}, |%types{"video"}];
%types{"all"} = [|%types{"audio"}, |%types{"image"}, |%types{"video"}, |%types{"archive"}, |%types{"directory"}];

sub normalize-type($_) {
    #= Get the "canonical" un-abbreviated name of the type.
    return "image" if /^i(mages?)?$/;
    return "audio" if /^(a(udio)?|mu(sic)?)$/;
    return "video" if /^v(ideos?)?$/;
    return "archive" if /^(c(omp(ress(ed)?)?)?|ar(ch(ive)?)?)$/;
    return "visual" if /^(vis(ual)?|me(dia)?)$/;
    return "directory" if /^d(ir(ectory)?)?$/;
    return "all" if /^a(ll|ny)$/;
    fail "unknown type \"$_\"; Try instead one of: " ~ %types.keys.sort.join(", ");
}

sub type-extensions($type is copy) {
    #= Get a list of file extensions for TYPE.
    return %types{$type};
}

sub extension-of($filename) {
    #= Get the lowercased file extension of FILENAME. If it's a directory, "/" is returned.
    return "/" if ($filename.IO.d);
    return $filename.IO.extension.lc;
}

sub is-extension-type($filename, $type) {
    #= True when FILENAME's extension is one of EXTENSIONS.
    extension-of($filename) ~~ any(|type-extensions($type));
}

subset optval of Any where Str|True;

sub MAIN(
    Str $type is copy, #= The type to filter to; should be one of: image, audio, video, archive, directory, visual, all
    optval :$print, #= Print the extensions for TYPE rather than filtering. a value can be provided to change the format; accepts "find", "space", or "newline" (default)
) {
    $type = normalize-type($type);

    if ($print.defined) {
        given $print {
            when any(qw/ find bfs /) {
                type-extensions($type).map({
                    if ($_ eq '/') {
                        "-type\nd";
                    } else {
                        "-iname\n*." ~ $_;
                    }
                }).join("\n-or\n").say;
            }
            when any(qw/ s sp space spaces /) {
                type-extensions($type).join(" ").say;
            }
            default {
                type-extensions($type).map(&say);
            }
        }
        exit;
    }

    for $*IN.lines {
        .say when is-extension-type($_, $type);
    }
}
