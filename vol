#!/usr/bin/env fish
# vol - change system volume.
# more convenient and intuitive than typing crap like "amixer -c 2 set PCM +2%"

# used as a reference:
# https://github.com/claudius-kienle/polybar-pipewire-control/blob/master/pipewire-control.bash
# perhaps in the future pw-volume could be used (it failed to compile for me before)

# usage:
# vol <operation> <parameter>
# or:
# vol <operation and parameter>

# operations are:
# + u up - increase volume.
# - d down - decrease volume.
# r reset s set - set volume to the specified value.
# [number]% - set volume to the specified value.
# t toggle - toggle muting.
# m mute - mute.
# un unmute - unmute.
# switch swap output o - switch output device (basically just unmutes one and mutes the others).

# examples:
#
# show current volume:
# vol
#
# decrease volume by 2%:
# vol d
#
# increase volume by 5%:
# vol 5+
#
# increase volume by 3%:
# vol u 3
#
# toggle muting:
# vol t
#
# set volume to 40%:
# vol 40

# code:

function default_sink_name
    string match 'Default Sink:*' (pactl info) | string sub -s 15
end

function sink_id
    pactl list sinks short | string match "$argv"
end

function sink_description
    string match --regex '\n*Description:.*' "$pactl" | string sub -s 14
end

function sink_volume_percent
    # echo "$pactl" | grep -A 15 'Sink #' | grep '^\\s*Volume:' | awk -F ':' '{print $3; exit}'
    string match --regex 'Volume:.*?([0-9]+%)' "$pactl" | tail -1
end

function sink_mute_status
    string match --regex 'Mute: (.+?)\n' "$pactl" | tail -1
end

function mute
    pactl set-sink-mute '@DEFAULT_SINK@' $argv
end

function volume
    pactl set-sink-volume '@DEFAULT_SINK@' $argv
end

if test (count $argv) -gt 0
    switch "$argv[1]"
        case mute m
            mute on
        case unmute un
            mute off
        case toggle t
            mute toggle
        case + u up
            volume '+3%'
        case - d down
            volume '-3%'
        case reset r set s
            volume "$argv[2]"
        case '*%'
            volume "$argv[1]"
        case '*'
            echo 'vol: error: unrecognized argument'
            exit 1
    end
end

set pactl "$(pactl list sinks)"

printf '%s%s\n' (sink_volume_percent) (if test "$(sink_mute_status)" = 'yes'; echo -n ' (muted)'; end)

# sink_id "$(default_sink_name)"
